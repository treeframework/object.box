// *************************************
//
//   #BOX
//
// *************************************

// The box object simply boxes off content.

// Predefine the variables below in order to alter and enable specific features.
$tree-box-namespace:         $tree-namespace !default;

$tree-box-padding:           $tree-base-spacing-unit !default;
$tree-box-padding--tiny:     quarter($tree-box-padding) !default;
$tree-box-padding--small:    halve($tree-box-padding) !default;
$tree-box-padding--large:    double($tree-box-padding) !default;

$tree-enable-box--flush:     false !default
$tree-enable-box--tiny:      false !default;
$tree-enable-box--small:     false !default;
$tree-enable-box--large:     false !default;





// 1. So we can apply the `.box` class to naturally-inline elements.
.#{$tree-box-namespace}box,
%#{$tree-box-namespace}box {
    @extend %clearfix;
    display: block; // [1]
    padding: $tree-box-padding;

    > :last-child {
        margin-bottom: 0;
    }

}





@if ($tree-enable-box--flush == true) {

    // Flush (i.e. no padding) box.

    .#{$tree-box-namespace}box--flush,
    %#{$tree-box-namespace}box--flush {
        padding: 0;
    }

}

@if ($tree-enable-box--tiny == true) {

    // Tiny box.

    .#{$tree-box-namespace}box--tiny,
    %#{$tree-box-namespace}box--tiny {
        padding: $tree-box-padding--tiny;
    }

}

@if ($tree-enable-box--small == true) {

    // Small box.

    .#{$tree-box-namespace}box--small,
    %#{$tree-box-namespace}box--small {
        padding: $tree-box-padding--small;
    }

}

@if ($tree-enable-box--large == true) {

    // Large box.

    .#{$tree-box-namespace}box--large,
    %#{$tree-box-namespace}box--large {
        padding: $tree-box-padding--large;
    }

}
